name: Terraform Model

on:  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment' 
        type: choice
        required: true
        default: 'dev'
        options:
         - dev
         - qa
         - prd
         
      action:
        description: 'Action' 
        type: choice
        required: true
        default: 'apply'
        options:
         - apply
         - destroy
         

run-name: "${{ inputs.environment }}: Terraform ${{ inputs.action }}"

env:
  TERRAFORM_VERSION: 1.3.7
  TERRAFORM_VARS_PATH: "env/dev.tfvars"
  TERRAFORM_VARS: ""
  TERRAFORM_GCP_BACKEND_BUCKET: ""
  TERRAFORM_GCP_BACKEND_PREFIX: ""
  TERRAFORM_TFPLAN_NAME: ${{ inputs.action }}_${{ github.sha }}
  TERRAFORM_ACTION: ${{ inputs.action }}

jobs:
  Plan:
    name:  "${{ inputs.environment }}: Terraform plan ${{ inputs.action }}"
    runs-on: ubuntu-latest
    environment: plan_${{ inputs.environment }}
    steps:
    
    # Download Last Version Repo
    - name: Checkout
      uses: actions/checkout@v3

    # Install Latest Version Terraform
    - name: Terraform install ${{ env.TERRAFORM_VERSION }}
      uses: hashicorp/setup-terraform@v2
      id: tfsetup
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
     
     # Terraform Initializer 
    - name: "plan_${{ inputs.environment }}: Terraform init"
      id: init
      run: |
            TERRAFORM_ARGUMENTS=""
            
            # If TERRAFORM_GCP_BACKEND_BUCKET is not empty add argument --backend-config="bucket=$TERRAFORM_GCP_BACKEND_BUCKET"
            if [[ ! -z $TERRAFORM_GCP_BACKEND_BUCKET ]]; then
                
                TERRAFORM_ARGUMENTS+=" --backend-config=bucket=$TERRAFORM_GCP_BACKEND_BUCKET"
            fi
            
            # If TERRAFORM_GCP_BACKEND_BUCKET is not empty add argument --backend-config="prefix=$TERRAFORM_GCP_BACKEND_PREFIX"
            if [[ ! -z $TERRAFORM_GCP_BACKEND_PREFIX ]]; then
                
                TERRAFORM_ARGUMENTS+=" --backend-config=prefix=$TERRAFORM_GCP_BACKEND_PREFIX"
            fi
            
            terraform init $TERRAFORM_ARGUMENTS
      env:
        GOOGLE_BACKEND_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TERRAFORM_GCP_BACKEND_BUCKET: ${{ env.TERRAFORM_GCP_BACKEND_BUCKET }}
        TERRAFORM_GCP_BACKEND_PREFIX: ${{ env.TERRAFORM_GCP_BACKEND_PREFIX }}
        
      
    #  Terraform Validation
    - name: Terraform Validate
      id: validate
      run: terraform validate
    
    # Terraform Security Analysis
    - name: tfsec analyzer
      uses: aquasecurity/tfsec-action@v1.0.3
      if: ${{ inputs.action == 'apply' }}
      with:
        version: latest
        additional_args: --force-all-dirs --out tfsecresult
        soft_fail: false
        github_token: ${{ secrets.GITHUB_TOKEN }}

    # Security Result Output
    - name: tfsec output 
      run: cat tfsecresult
      if: ${{ always() &&  inputs.action == 'apply' }}
      
    # Terraform Plan with credential GCP and output file tfplan
    - name: "plan_${{ inputs.environment }}: Terraform plan ${{ inputs.action }}"
      id: plan
      run: |
            TERRAFORM_ARGUMENTS=""
            
            # If TERRAFORM_VARS is not empty add argument -vars
            if [[ ! -z $TERRAFORM_VARS ]]; then
                TERRAFORM_ARGUMENTS+=" $TERRAFORM_VARS"
            fi
                              
            # If TERRAFORM_VARS_PATH is not empty add -var-file argument
            if [ ! -z $TERRAFORM_VARS_PATH ];then
              TERRAFORM_ARGUMENTS+=" -var-file=$TERRAFORM_VARS_PATH"
            fi
            
            # If TERRAFORM_VARS_PATH is not empty 
            if [[ $TERRAFORM_ACTION == 'destroy' ]];then
              TERRAFORM_ARGUMENTS+=" -destroy"
            fi
            
            # Define output file
            TERRAFORM_ARGUMENTS+=" --out=$TERRAFORM_TFPLAN_NAME"
            
            terraform plan  $TERRAFORM_ARGUMENTS
          
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TERRAFORM_ACTION: ${{ env.TERRAFORM_ACTION }}
        TERRAFORM_TFPLAN_NAME: ${{ env.TERRAFORM_TFPLAN_NAME }}.tfplan
        TERRAFORM_VARS: ${{ env.TERRAFORM_VARS }}
        TERRAFORM_VARS_PATH: ${{ env.TERRAFORM_VARS_PATH }}
        
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
       name: ${{ env.TERRAFORM_TFPLAN_NAME }}
       path: |
          *
          !.git
          !.github
          !**/*.md
          !.terraform*
          !tfsec*
       
  Deploy:
    name: "${{ inputs.environment }}: Terraform ${{ inputs.action }}"
    runs-on: ubuntu-latest
    needs: Plan
    environment: ${{ inputs.environment }}
    steps:
    
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ env.TERRAFORM_TFPLAN_NAME }}
          
      # Install Latest Version Terraform
      - name: Terraform Install Latest
        uses: hashicorp/setup-terraform@v2
        id: tfsetup
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

       # Terraform Initializer 
      - name: "${{ inputs.environment }}: Terraform init"
        id: init
        run: |
              TERRAFORM_ARGUMENTS=""

              # If TERRAFORM_GCP_BACKEND_BUCKET is not empty add argument --backend-config="bucket=$TERRAFORM_GCP_BACKEND_BUCKET"
              if [[ ! -z $TERRAFORM_GCP_BACKEND_BUCKET ]]; then

                  TERRAFORM_ARGUMENTS+=" --backend-config=bucket=$TERRAFORM_GCP_BACKEND_BUCKET"
              fi

              # If TERRAFORM_GCP_BACKEND_BUCKET is not empty add argument --backend-config="prefix=$TERRAFORM_GCP_BACKEND_PREFIX"
              if [[ ! -z $TERRAFORM_GCP_BACKEND_PREFIX ]]; then

                  TERRAFORM_ARGUMENTS+=" --backend-config=prefix=$TERRAFORM_GCP_BACKEND_PREFIX"
              fi

              terraform init $TERRAFORM_ARGUMENTS
        env:
          GOOGLE_BACKEND_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TERRAFORM_GCP_BACKEND_BUCKET: ${{ env.TERRAFORM_GCP_BACKEND_BUCKET }}
          TERRAFORM_GCP_BACKEND_PREFIX: ${{ env.TERRAFORM_GCP_BACKEND_PREFIX }}

      # Terraform Apply with credential GCP and output file tfplan
      - name: "${{ inputs.environment }}: Terraform ${{ inputs.action }}"
        id: apply-destroy
        run: terraform apply $TERRAFORM_TFPLAN_NAME
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TERRAFORM_TFPLAN_NAME: ${{ env.TERRAFORM_TFPLAN_NAME }}.tfplan

        
